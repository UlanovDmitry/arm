
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c2c  08000c2c  00010c2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c4c  08000c4c  00010c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c50  08000c50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000c60  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000c60  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000037b7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001056  00000000  00000000  000237ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dcd  00000000  00000000  00024842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000350  00000000  00000000  00025610  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  00025960  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001c76  00000000  00000000  00025d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000121e  00000000  00000000  000279fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00028c1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000006e4  00000000  00000000  00028c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c14 	.word	0x08000c14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000c14 	.word	0x08000c14

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fc8e 	bl	8000acc <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002bc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002be:	4626      	mov	r6, r4
 80002c0:	4b66      	ldr	r3, [pc, #408]	; (800045c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800046c <HAL_GPIO_Init+0x1b4>
 80002c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000470 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002ca:	680a      	ldr	r2, [r1, #0]
 80002cc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002d0:	d102      	bne.n	80002d8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002d2:	b003      	add	sp, #12
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002d8:	f04f 0801 	mov.w	r8, #1
 80002dc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002e4:	4590      	cmp	r8, r2
 80002e6:	d17f      	bne.n	80003e8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002e8:	684d      	ldr	r5, [r1, #4]
 80002ea:	2d12      	cmp	r5, #18
 80002ec:	f000 80aa 	beq.w	8000444 <HAL_GPIO_Init+0x18c>
 80002f0:	f200 8083 	bhi.w	80003fa <HAL_GPIO_Init+0x142>
 80002f4:	2d02      	cmp	r5, #2
 80002f6:	f000 80a2 	beq.w	800043e <HAL_GPIO_Init+0x186>
 80002fa:	d877      	bhi.n	80003ec <HAL_GPIO_Init+0x134>
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	f000 8089 	beq.w	8000414 <HAL_GPIO_Init+0x15c>
 8000302:	2d01      	cmp	r5, #1
 8000304:	f000 8099 	beq.w	800043a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030c:	2aff      	cmp	r2, #255	; 0xff
 800030e:	bf93      	iteet	ls
 8000310:	4682      	movls	sl, r0
 8000312:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000316:	3d08      	subhi	r5, #8
 8000318:	f8d0 b000 	ldrls.w	fp, [r0]
 800031c:	bf92      	itee	ls
 800031e:	00b5      	lslls	r5, r6, #2
 8000320:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000324:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000326:	fa09 f805 	lsl.w	r8, r9, r5
 800032a:	ea2b 0808 	bic.w	r8, fp, r8
 800032e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000332:	bf88      	it	hi
 8000334:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	ea48 0505 	orr.w	r5, r8, r5
 800033c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000340:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000344:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000348:	d04e      	beq.n	80003e8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4d45      	ldr	r5, [pc, #276]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034c:	4f44      	ldr	r7, [pc, #272]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034e:	69ad      	ldr	r5, [r5, #24]
 8000350:	f026 0803 	bic.w	r8, r6, #3
 8000354:	f045 0501 	orr.w	r5, r5, #1
 8000358:	61bd      	str	r5, [r7, #24]
 800035a:	69bd      	ldr	r5, [r7, #24]
 800035c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000360:	f005 0501 	and.w	r5, r5, #1
 8000364:	9501      	str	r5, [sp, #4]
 8000366:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800036a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000374:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000378:	fa09 f90b 	lsl.w	r9, r9, fp
 800037c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000380:	4d38      	ldr	r5, [pc, #224]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 8000382:	42a8      	cmp	r0, r5
 8000384:	d063      	beq.n	800044e <HAL_GPIO_Init+0x196>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	d061      	beq.n	8000452 <HAL_GPIO_Init+0x19a>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d05f      	beq.n	8000456 <HAL_GPIO_Init+0x19e>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	bf0c      	ite	eq
 800039e:	2503      	moveq	r5, #3
 80003a0:	2504      	movne	r5, #4
 80003a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003b4:	bf14      	ite	ne
 80003b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003b8:	4395      	biceq	r5, r2
 80003ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c2:	bf14      	ite	ne
 80003c4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003c6:	4395      	biceq	r5, r2
 80003c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e2:	ea25 0202 	biceq.w	r2, r5, r2
 80003e6:	60da      	str	r2, [r3, #12]
	position++;
 80003e8:	3601      	adds	r6, #1
 80003ea:	e76e      	b.n	80002ca <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003ec:	2d03      	cmp	r5, #3
 80003ee:	d022      	beq.n	8000436 <HAL_GPIO_Init+0x17e>
 80003f0:	2d11      	cmp	r5, #17
 80003f2:	d189      	bne.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f4:	68cc      	ldr	r4, [r1, #12]
 80003f6:	3404      	adds	r4, #4
          break;
 80003f8:	e786      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003fa:	4f1b      	ldr	r7, [pc, #108]	; (8000468 <HAL_GPIO_Init+0x1b0>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d009      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000400:	d812      	bhi.n	8000428 <HAL_GPIO_Init+0x170>
 8000402:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000406:	454d      	cmp	r5, r9
 8000408:	d004      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800040a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040e:	454d      	cmp	r5, r9
 8000410:	f47f af7a 	bne.w	8000308 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000414:	688c      	ldr	r4, [r1, #8]
 8000416:	b1c4      	cbz	r4, 800044a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000418:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800041a:	bf0c      	ite	eq
 800041c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000420:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000424:	2408      	movs	r4, #8
 8000426:	e76f      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000428:	4575      	cmp	r5, lr
 800042a:	d0f3      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800042c:	4565      	cmp	r5, ip
 800042e:	d0f1      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000430:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000478 <HAL_GPIO_Init+0x1c0>
 8000434:	e7eb      	b.n	800040e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000436:	2400      	movs	r4, #0
 8000438:	e766      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800043a:	68cc      	ldr	r4, [r1, #12]
          break;
 800043c:	e764      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043e:	68cc      	ldr	r4, [r1, #12]
 8000440:	3408      	adds	r4, #8
          break;
 8000442:	e761      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000444:	68cc      	ldr	r4, [r1, #12]
 8000446:	340c      	adds	r4, #12
          break;
 8000448:	e75e      	b.n	8000308 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800044a:	2404      	movs	r4, #4
 800044c:	e75c      	b.n	8000308 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800044e:	2500      	movs	r5, #0
 8000450:	e7a7      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000452:	2501      	movs	r5, #1
 8000454:	e7a5      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000456:	2502      	movs	r5, #2
 8000458:	e7a3      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	10210000 	.word	0x10210000
 800046c:	10310000 	.word	0x10310000
 8000470:	10320000 	.word	0x10320000
 8000474:	10110000 	.word	0x10110000
 8000478:	10220000 	.word	0x10220000

0800047c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800047c:	b10a      	cbz	r2, 8000482 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047e:	6101      	str	r1, [r0, #16]
 8000480:	4770      	bx	lr
 8000482:	0409      	lsls	r1, r1, #16
 8000484:	e7fb      	b.n	800047e <HAL_GPIO_WritePin+0x2>
	...

08000488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800048c:	4605      	mov	r5, r0
 800048e:	b908      	cbnz	r0, 8000494 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000490:	2001      	movs	r0, #1
 8000492:	e03c      	b.n	800050e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000494:	6803      	ldr	r3, [r0, #0]
 8000496:	07db      	lsls	r3, r3, #31
 8000498:	d410      	bmi.n	80004bc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800049a:	682b      	ldr	r3, [r5, #0]
 800049c:	079f      	lsls	r7, r3, #30
 800049e:	d45d      	bmi.n	800055c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004a0:	682b      	ldr	r3, [r5, #0]
 80004a2:	0719      	lsls	r1, r3, #28
 80004a4:	f100 8094 	bmi.w	80005d0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	075a      	lsls	r2, r3, #29
 80004ac:	f100 80be 	bmi.w	800062c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004b0:	69e8      	ldr	r0, [r5, #28]
 80004b2:	2800      	cmp	r0, #0
 80004b4:	f040 812c 	bne.w	8000710 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004b8:	2000      	movs	r0, #0
 80004ba:	e028      	b.n	800050e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004bc:	4c8f      	ldr	r4, [pc, #572]	; (80006fc <HAL_RCC_OscConfig+0x274>)
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d007      	beq.n	80004d8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	f003 030c 	and.w	r3, r3, #12
 80004ce:	2b08      	cmp	r3, #8
 80004d0:	d109      	bne.n	80004e6 <HAL_RCC_OscConfig+0x5e>
 80004d2:	6863      	ldr	r3, [r4, #4]
 80004d4:	03de      	lsls	r6, r3, #15
 80004d6:	d506      	bpl.n	80004e6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004d8:	6823      	ldr	r3, [r4, #0]
 80004da:	039c      	lsls	r4, r3, #14
 80004dc:	d5dd      	bpl.n	800049a <HAL_RCC_OscConfig+0x12>
 80004de:	686b      	ldr	r3, [r5, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1da      	bne.n	800049a <HAL_RCC_OscConfig+0x12>
 80004e4:	e7d4      	b.n	8000490 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e6:	686b      	ldr	r3, [r5, #4]
 80004e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004ec:	d112      	bne.n	8000514 <HAL_RCC_OscConfig+0x8c>
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f6:	f7ff fe6b 	bl	80001d0 <HAL_GetTick>
 80004fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	0398      	lsls	r0, r3, #14
 8000500:	d4cb      	bmi.n	800049a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000502:	f7ff fe65 	bl	80001d0 <HAL_GetTick>
 8000506:	1b80      	subs	r0, r0, r6
 8000508:	2864      	cmp	r0, #100	; 0x64
 800050a:	d9f7      	bls.n	80004fc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800050c:	2003      	movs	r0, #3
}
 800050e:	b002      	add	sp, #8
 8000510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000514:	b99b      	cbnz	r3, 800053e <HAL_RCC_OscConfig+0xb6>
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800051c:	6023      	str	r3, [r4, #0]
 800051e:	6823      	ldr	r3, [r4, #0]
 8000520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000524:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000526:	f7ff fe53 	bl	80001d0 <HAL_GetTick>
 800052a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	0399      	lsls	r1, r3, #14
 8000530:	d5b3      	bpl.n	800049a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000532:	f7ff fe4d 	bl	80001d0 <HAL_GetTick>
 8000536:	1b80      	subs	r0, r0, r6
 8000538:	2864      	cmp	r0, #100	; 0x64
 800053a:	d9f7      	bls.n	800052c <HAL_RCC_OscConfig+0xa4>
 800053c:	e7e6      	b.n	800050c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	d103      	bne.n	800054e <HAL_RCC_OscConfig+0xc6>
 8000546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	e7cf      	b.n	80004ee <HAL_RCC_OscConfig+0x66>
 800054e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000552:	6023      	str	r3, [r4, #0]
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055a:	e7cb      	b.n	80004f4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800055c:	4c67      	ldr	r4, [pc, #412]	; (80006fc <HAL_RCC_OscConfig+0x274>)
 800055e:	6863      	ldr	r3, [r4, #4]
 8000560:	f013 0f0c 	tst.w	r3, #12
 8000564:	d007      	beq.n	8000576 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000566:	6863      	ldr	r3, [r4, #4]
 8000568:	f003 030c 	and.w	r3, r3, #12
 800056c:	2b08      	cmp	r3, #8
 800056e:	d110      	bne.n	8000592 <HAL_RCC_OscConfig+0x10a>
 8000570:	6863      	ldr	r3, [r4, #4]
 8000572:	03da      	lsls	r2, r3, #15
 8000574:	d40d      	bmi.n	8000592 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	079b      	lsls	r3, r3, #30
 800057a:	d502      	bpl.n	8000582 <HAL_RCC_OscConfig+0xfa>
 800057c:	692b      	ldr	r3, [r5, #16]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d186      	bne.n	8000490 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	696a      	ldr	r2, [r5, #20]
 8000586:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800058a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800058e:	6023      	str	r3, [r4, #0]
 8000590:	e786      	b.n	80004a0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000592:	692a      	ldr	r2, [r5, #16]
 8000594:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <HAL_RCC_OscConfig+0x278>)
 8000596:	b16a      	cbz	r2, 80005b4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800059c:	f7ff fe18 	bl	80001d0 <HAL_GetTick>
 80005a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	079f      	lsls	r7, r3, #30
 80005a6:	d4ec      	bmi.n	8000582 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005a8:	f7ff fe12 	bl	80001d0 <HAL_GetTick>
 80005ac:	1b80      	subs	r0, r0, r6
 80005ae:	2802      	cmp	r0, #2
 80005b0:	d9f7      	bls.n	80005a2 <HAL_RCC_OscConfig+0x11a>
 80005b2:	e7ab      	b.n	800050c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b6:	f7ff fe0b 	bl	80001d0 <HAL_GetTick>
 80005ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	0798      	lsls	r0, r3, #30
 80005c0:	f57f af6e 	bpl.w	80004a0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	1b80      	subs	r0, r0, r6
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d9f6      	bls.n	80005bc <HAL_RCC_OscConfig+0x134>
 80005ce:	e79d      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005d0:	69aa      	ldr	r2, [r5, #24]
 80005d2:	4c4a      	ldr	r4, [pc, #296]	; (80006fc <HAL_RCC_OscConfig+0x274>)
 80005d4:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <HAL_RCC_OscConfig+0x27c>)
 80005d6:	b1da      	cbz	r2, 8000610 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005e4:	079b      	lsls	r3, r3, #30
 80005e6:	d50d      	bpl.n	8000604 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <HAL_RCC_OscConfig+0x280>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80005f6:	bf00      	nop
  }
  while (Delay --);
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f9      	bne.n	80005f6 <HAL_RCC_OscConfig+0x16e>
 8000602:	e751      	b.n	80004a8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	1b80      	subs	r0, r0, r6
 800060a:	2802      	cmp	r0, #2
 800060c:	d9e9      	bls.n	80005e2 <HAL_RCC_OscConfig+0x15a>
 800060e:	e77d      	b.n	800050c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000610:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000612:	f7ff fddd 	bl	80001d0 <HAL_GetTick>
 8000616:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061a:	079f      	lsls	r7, r3, #30
 800061c:	f57f af44 	bpl.w	80004a8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000620:	f7ff fdd6 	bl	80001d0 <HAL_GetTick>
 8000624:	1b80      	subs	r0, r0, r6
 8000626:	2802      	cmp	r0, #2
 8000628:	d9f6      	bls.n	8000618 <HAL_RCC_OscConfig+0x190>
 800062a:	e76f      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800062c:	4c33      	ldr	r4, [pc, #204]	; (80006fc <HAL_RCC_OscConfig+0x274>)
 800062e:	69e3      	ldr	r3, [r4, #28]
 8000630:	00d8      	lsls	r0, r3, #3
 8000632:	d424      	bmi.n	800067e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000634:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	69e3      	ldr	r3, [r4, #28]
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	61e3      	str	r3, [r4, #28]
 800063e:	69e3      	ldr	r3, [r4, #28]
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000648:	4e30      	ldr	r6, [pc, #192]	; (800070c <HAL_RCC_OscConfig+0x284>)
 800064a:	6833      	ldr	r3, [r6, #0]
 800064c:	05d9      	lsls	r1, r3, #23
 800064e:	d518      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000650:	68eb      	ldr	r3, [r5, #12]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d126      	bne.n	80006a4 <HAL_RCC_OscConfig+0x21c>
 8000656:	6a23      	ldr	r3, [r4, #32]
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800065e:	f7ff fdb7 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000662:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000666:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	079b      	lsls	r3, r3, #30
 800066c:	d53f      	bpl.n	80006ee <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800066e:	2f00      	cmp	r7, #0
 8000670:	f43f af1e 	beq.w	80004b0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000674:	69e3      	ldr	r3, [r4, #28]
 8000676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800067a:	61e3      	str	r3, [r4, #28]
 800067c:	e718      	b.n	80004b0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800067e:	2700      	movs	r7, #0
 8000680:	e7e2      	b.n	8000648 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800068a:	f7ff fda1 	bl	80001d0 <HAL_GetTick>
 800068e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000690:	6833      	ldr	r3, [r6, #0]
 8000692:	05da      	lsls	r2, r3, #23
 8000694:	d4dc      	bmi.n	8000650 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000696:	f7ff fd9b 	bl	80001d0 <HAL_GetTick>
 800069a:	eba0 0008 	sub.w	r0, r0, r8
 800069e:	2864      	cmp	r0, #100	; 0x64
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x208>
 80006a2:	e733      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	b9ab      	cbnz	r3, 80006d2 <HAL_RCC_OscConfig+0x24a>
 80006a6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ac:	f023 0301 	bic.w	r3, r3, #1
 80006b0:	6223      	str	r3, [r4, #32]
 80006b2:	6a23      	ldr	r3, [r4, #32]
 80006b4:	f023 0304 	bic.w	r3, r3, #4
 80006b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ba:	f7ff fd89 	bl	80001d0 <HAL_GetTick>
 80006be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	0798      	lsls	r0, r3, #30
 80006c4:	d5d3      	bpl.n	800066e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006c6:	f7ff fd83 	bl	80001d0 <HAL_GetTick>
 80006ca:	1b80      	subs	r0, r0, r6
 80006cc:	4540      	cmp	r0, r8
 80006ce:	d9f7      	bls.n	80006c0 <HAL_RCC_OscConfig+0x238>
 80006d0:	e71c      	b.n	800050c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	d103      	bne.n	80006e0 <HAL_RCC_OscConfig+0x258>
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6223      	str	r3, [r4, #32]
 80006de:	e7ba      	b.n	8000656 <HAL_RCC_OscConfig+0x1ce>
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6223      	str	r3, [r4, #32]
 80006e6:	6a23      	ldr	r3, [r4, #32]
 80006e8:	f023 0304 	bic.w	r3, r3, #4
 80006ec:	e7b6      	b.n	800065c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	eba0 0008 	sub.w	r0, r0, r8
 80006f6:	42b0      	cmp	r0, r6
 80006f8:	d9b6      	bls.n	8000668 <HAL_RCC_OscConfig+0x1e0>
 80006fa:	e707      	b.n	800050c <HAL_RCC_OscConfig+0x84>
 80006fc:	40021000 	.word	0x40021000
 8000700:	42420000 	.word	0x42420000
 8000704:	42420480 	.word	0x42420480
 8000708:	20000008 	.word	0x20000008
 800070c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <HAL_RCC_OscConfig+0x334>)
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	461c      	mov	r4, r3
 8000716:	f002 020c 	and.w	r2, r2, #12
 800071a:	2a08      	cmp	r2, #8
 800071c:	d03d      	beq.n	800079a <HAL_RCC_OscConfig+0x312>
 800071e:	2300      	movs	r3, #0
 8000720:	4e27      	ldr	r6, [pc, #156]	; (80007c0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000722:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000724:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000726:	d12b      	bne.n	8000780 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000728:	f7ff fd52 	bl	80001d0 <HAL_GetTick>
 800072c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	0199      	lsls	r1, r3, #6
 8000732:	d41f      	bmi.n	8000774 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000734:	6a2b      	ldr	r3, [r5, #32]
 8000736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800073a:	d105      	bne.n	8000748 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800073c:	6862      	ldr	r2, [r4, #4]
 800073e:	68a9      	ldr	r1, [r5, #8]
 8000740:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000744:	430a      	orrs	r2, r1
 8000746:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000748:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800074a:	6862      	ldr	r2, [r4, #4]
 800074c:	430b      	orrs	r3, r1
 800074e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000752:	4313      	orrs	r3, r2
 8000754:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000756:	2301      	movs	r3, #1
 8000758:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800075a:	f7ff fd39 	bl	80001d0 <HAL_GetTick>
 800075e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	019a      	lsls	r2, r3, #6
 8000764:	f53f aea8 	bmi.w	80004b8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000768:	f7ff fd32 	bl	80001d0 <HAL_GetTick>
 800076c:	1b40      	subs	r0, r0, r5
 800076e:	2802      	cmp	r0, #2
 8000770:	d9f6      	bls.n	8000760 <HAL_RCC_OscConfig+0x2d8>
 8000772:	e6cb      	b.n	800050c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000774:	f7ff fd2c 	bl	80001d0 <HAL_GetTick>
 8000778:	1bc0      	subs	r0, r0, r7
 800077a:	2802      	cmp	r0, #2
 800077c:	d9d7      	bls.n	800072e <HAL_RCC_OscConfig+0x2a6>
 800077e:	e6c5      	b.n	800050c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000780:	f7ff fd26 	bl	80001d0 <HAL_GetTick>
 8000784:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	f57f ae95 	bpl.w	80004b8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800078e:	f7ff fd1f 	bl	80001d0 <HAL_GetTick>
 8000792:	1b40      	subs	r0, r0, r5
 8000794:	2802      	cmp	r0, #2
 8000796:	d9f6      	bls.n	8000786 <HAL_RCC_OscConfig+0x2fe>
 8000798:	e6b8      	b.n	800050c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800079a:	2801      	cmp	r0, #1
 800079c:	f43f aeb7 	beq.w	800050e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007a0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007a2:	6a2b      	ldr	r3, [r5, #32]
 80007a4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007a8:	429a      	cmp	r2, r3
 80007aa:	f47f ae71 	bne.w	8000490 <HAL_RCC_OscConfig+0x8>
 80007ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007b0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007b4:	1ac0      	subs	r0, r0, r3
 80007b6:	bf18      	it	ne
 80007b8:	2001      	movne	r0, #1
 80007ba:	e6a8      	b.n	800050e <HAL_RCC_OscConfig+0x86>
 80007bc:	40021000 	.word	0x40021000
 80007c0:	42420060 	.word	0x42420060

080007c4 <HAL_RCC_GetSysClockFreq>:
{
 80007c4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ca:	ac02      	add	r4, sp, #8
 80007cc:	f103 0510 	add.w	r5, r3, #16
 80007d0:	4622      	mov	r2, r4
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	6859      	ldr	r1, [r3, #4]
 80007d6:	3308      	adds	r3, #8
 80007d8:	c203      	stmia	r2!, {r0, r1}
 80007da:	42ab      	cmp	r3, r5
 80007dc:	4614      	mov	r4, r2
 80007de:	d1f7      	bne.n	80007d0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e0:	2301      	movs	r3, #1
 80007e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007e6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007e8:	4911      	ldr	r1, [pc, #68]	; (8000830 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ea:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f0:	f003 020c 	and.w	r2, r3, #12
 80007f4:	2a08      	cmp	r2, #8
 80007f6:	d117      	bne.n	8000828 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007fc:	a806      	add	r0, sp, #24
 80007fe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000800:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000802:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000806:	d50c      	bpl.n	8000822 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000808:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000810:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000812:	aa06      	add	r2, sp, #24
 8000814:	4413      	add	r3, r2
 8000816:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800081e:	b007      	add	sp, #28
 8000820:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_RCC_GetSysClockFreq+0x74>)
 8000824:	4350      	muls	r0, r2
 8000826:	e7fa      	b.n	800081e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800082a:	e7f8      	b.n	800081e <HAL_RCC_GetSysClockFreq+0x5a>
 800082c:	08000c2c 	.word	0x08000c2c
 8000830:	40021000 	.word	0x40021000
 8000834:	007a1200 	.word	0x007a1200
 8000838:	003d0900 	.word	0x003d0900

0800083c <HAL_RCC_ClockConfig>:
{
 800083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000840:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000842:	4604      	mov	r4, r0
 8000844:	b910      	cbnz	r0, 800084c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800084c:	4a45      	ldr	r2, [pc, #276]	; (8000964 <HAL_RCC_ClockConfig+0x128>)
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f003 0307 	and.w	r3, r3, #7
 8000854:	428b      	cmp	r3, r1
 8000856:	d329      	bcc.n	80008ac <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000858:	6821      	ldr	r1, [r4, #0]
 800085a:	078e      	lsls	r6, r1, #30
 800085c:	d431      	bmi.n	80008c2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085e:	07ca      	lsls	r2, r1, #31
 8000860:	d444      	bmi.n	80008ec <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <HAL_RCC_ClockConfig+0x128>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	429d      	cmp	r5, r3
 800086c:	d367      	bcc.n	800093e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086e:	6822      	ldr	r2, [r4, #0]
 8000870:	4d3d      	ldr	r5, [pc, #244]	; (8000968 <HAL_RCC_ClockConfig+0x12c>)
 8000872:	f012 0f04 	tst.w	r2, #4
 8000876:	d16e      	bne.n	8000956 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0713      	lsls	r3, r2, #28
 800087a:	d506      	bpl.n	800088a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800087c:	686b      	ldr	r3, [r5, #4]
 800087e:	6922      	ldr	r2, [r4, #16]
 8000880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800088a:	f7ff ff9b 	bl	80007c4 <HAL_RCC_GetSysClockFreq>
 800088e:	686b      	ldr	r3, [r5, #4]
 8000890:	4a36      	ldr	r2, [pc, #216]	; (800096c <HAL_RCC_ClockConfig+0x130>)
 8000892:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	40d8      	lsrs	r0, r3
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <HAL_RCC_ClockConfig+0x134>)
 800089c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <HAL_RCC_ClockConfig+0x138>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f7ff fc53 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a6:	2000      	movs	r0, #0
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	f023 0307 	bic.w	r3, r3, #7
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	4299      	cmp	r1, r3
 80008be:	d1c2      	bne.n	8000846 <HAL_RCC_ClockConfig+0xa>
 80008c0:	e7ca      	b.n	8000858 <HAL_RCC_ClockConfig+0x1c>
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008c8:	bf1e      	ittt	ne
 80008ca:	685a      	ldrne	r2, [r3, #4]
 80008cc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008d0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008d4:	bf42      	ittt	mi
 80008d6:	685a      	ldrmi	r2, [r3, #4]
 80008d8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008dc:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	68a0      	ldr	r0, [r4, #8]
 80008e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008e6:	4302      	orrs	r2, r0
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	e7b8      	b.n	800085e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ec:	6862      	ldr	r2, [r4, #4]
 80008ee:	4e1e      	ldr	r6, [pc, #120]	; (8000968 <HAL_RCC_ClockConfig+0x12c>)
 80008f0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f2:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f4:	d11b      	bne.n	800092e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fa:	d0a4      	beq.n	8000846 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fc:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000902:	f023 0303 	bic.w	r3, r3, #3
 8000906:	4313      	orrs	r3, r2
 8000908:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800090a:	f7ff fc61 	bl	80001d0 <HAL_GetTick>
 800090e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000910:	6873      	ldr	r3, [r6, #4]
 8000912:	6862      	ldr	r2, [r4, #4]
 8000914:	f003 030c 	and.w	r3, r3, #12
 8000918:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800091c:	d0a1      	beq.n	8000862 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc57 	bl	80001d0 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	d9f3      	bls.n	8000910 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000928:	2003      	movs	r0, #3
}
 800092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800092e:	2a02      	cmp	r2, #2
 8000930:	d102      	bne.n	8000938 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000932:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000936:	e7e0      	b.n	80008fa <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	f013 0f02 	tst.w	r3, #2
 800093c:	e7dd      	b.n	80008fa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	432b      	orrs	r3, r5
 8000946:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	429d      	cmp	r5, r3
 8000950:	f47f af79 	bne.w	8000846 <HAL_RCC_ClockConfig+0xa>
 8000954:	e78b      	b.n	800086e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000956:	686b      	ldr	r3, [r5, #4]
 8000958:	68e1      	ldr	r1, [r4, #12]
 800095a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800095e:	430b      	orrs	r3, r1
 8000960:	606b      	str	r3, [r5, #4]
 8000962:	e789      	b.n	8000878 <HAL_RCC_ClockConfig+0x3c>
 8000964:	40022000 	.word	0x40022000
 8000968:	40021000 	.word	0x40021000
 800096c:	08000c3c 	.word	0x08000c3c
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	2210      	movs	r2, #16
{
 800097a:	b510      	push	{r4, lr}
 800097c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	eb0d 0002 	add.w	r0, sp, r2
 8000982:	2100      	movs	r1, #0
 8000984:	f000 f93e 	bl	8000c04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800098a:	4c19      	ldr	r4, [pc, #100]	; (80009f0 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800098e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	f042 0210 	orr.w	r2, r2, #16
 8000994:	619a      	str	r2, [r3, #24]
 8000996:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	f002 0210 	and.w	r2, r2, #16
 80009a0:	9201      	str	r2, [sp, #4]
 80009a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	f042 0220 	orr.w	r2, r2, #32
 80009aa:	619a      	str	r2, [r3, #24]
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	f002 0220 	and.w	r2, r2, #32
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	699a      	ldr	r2, [r3, #24]
 80009b8:	f042 0204 	orr.w	r2, r2, #4
 80009bc:	619a      	str	r2, [r3, #24]
 80009be:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	9303      	str	r3, [sp, #12]
 80009c8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ca:	f7ff fd57 	bl	800047c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	a904      	add	r1, sp, #16
 80009e0:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f7ff fc68 	bl	80002b8 <HAL_GPIO_Init>

}
 80009e8:	b008      	add	sp, #32
 80009ea:	bd10      	pop	{r4, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40011000 	.word	0x40011000

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b510      	push	{r4, lr}
 80009f6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f8:	2228      	movs	r2, #40	; 0x28
 80009fa:	2100      	movs	r1, #0
 80009fc:	a806      	add	r0, sp, #24
 80009fe:	f000 f901 	bl	8000c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a02:	2100      	movs	r1, #0
 8000a04:	2214      	movs	r2, #20
 8000a06:	a801      	add	r0, sp, #4
 8000a08:	f000 f8fc 	bl	8000c04 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a22:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f7ff fd2f 	bl	8000488 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a34:	4621      	mov	r1, r4
 8000a36:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a40:	f7ff fefc 	bl	800083c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000a44:	b010      	add	sp, #64	; 0x40
 8000a46:	bd10      	pop	{r4, pc}

08000a48 <main>:
{
 8000a48:	b508      	push	{r3, lr}
  HAL_Init();
 8000a4a:	f7ff fba3 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000a4e:	f7ff ffd1 	bl	80009f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000a52:	f7ff ff91 	bl	8000978 <MX_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a56:	4c1c      	ldr	r4, [pc, #112]	; (8000ac8 <main+0x80>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fd0c 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f7ff fbb9 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	4620      	mov	r0, r4
 8000a72:	f7ff fd03 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f7ff fbb0 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	4620      	mov	r0, r4
 8000a84:	f7ff fcfa 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f7ff fba7 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	4620      	mov	r0, r4
 8000a96:	f7ff fcf1 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f7ff fb9e 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff fce8 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f7ff fb95 	bl	80001dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	f7ff fcdf 	bl	800047c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f7ff fb8b 	bl	80001dc <HAL_Delay>
 8000ac6:	e7c7      	b.n	8000a58 <main+0x10>
 8000ac8:	40011000 	.word	0x40011000

08000acc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_MspInit+0x3c>)
{
 8000ace:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	f042 0201 	orr.w	r2, r2, #1
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	f002 0201 	and.w	r2, r2, #1
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae8:	61da      	str	r2, [r3, #28]
 8000aea:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af6:	6853      	ldr	r3, [r2, #4]
 8000af8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	b002      	add	sp, #8
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <NMI_Handler>:
 8000b10:	4770      	bx	lr

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler>

08000b1a <SVC_Handler>:
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f7ff bb4a 	b.w	80001b8 <HAL_IncTick>

08000b24 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <SystemInit+0x40>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	f042 0201 	orr.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b2e:	6859      	ldr	r1, [r3, #4]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <SystemInit+0x44>)
 8000b32:	400a      	ands	r2, r1
 8000b34:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b40:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b48:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000b50:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <SystemInit+0x48>)
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	f8ff0000 	.word	0xf8ff0000
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b72:	e003      	b.n	8000b7c <LoopCopyDataInit>

08000b74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b7a:	3104      	adds	r1, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b84:	d3f6      	bcc.n	8000b74 <CopyDataInit>
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b88:	e002      	b.n	8000b90 <LoopFillZerobss>

08000b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b8c:	f842 3b04 	str.w	r3, [r2], #4

08000b90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b94:	d3f9      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b96:	f7ff ffc5 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f000 f80f 	bl	8000bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff ff53 	bl	8000a48 <main>
  bx lr
 8000ba2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ba4:	08000c54 	.word	0x08000c54
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bb4:	2000002c 	.word	0x2000002c

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <__libc_init_array>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	2500      	movs	r5, #0
 8000bc0:	4e0c      	ldr	r6, [pc, #48]	; (8000bf4 <__libc_init_array+0x38>)
 8000bc2:	4c0d      	ldr	r4, [pc, #52]	; (8000bf8 <__libc_init_array+0x3c>)
 8000bc4:	1ba4      	subs	r4, r4, r6
 8000bc6:	10a4      	asrs	r4, r4, #2
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	d109      	bne.n	8000be0 <__libc_init_array+0x24>
 8000bcc:	f000 f822 	bl	8000c14 <_init>
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	4e0a      	ldr	r6, [pc, #40]	; (8000bfc <__libc_init_array+0x40>)
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <__libc_init_array+0x44>)
 8000bd6:	1ba4      	subs	r4, r4, r6
 8000bd8:	10a4      	asrs	r4, r4, #2
 8000bda:	42a5      	cmp	r5, r4
 8000bdc:	d105      	bne.n	8000bea <__libc_init_array+0x2e>
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be4:	4798      	blx	r3
 8000be6:	3501      	adds	r5, #1
 8000be8:	e7ee      	b.n	8000bc8 <__libc_init_array+0xc>
 8000bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bee:	4798      	blx	r3
 8000bf0:	3501      	adds	r5, #1
 8000bf2:	e7f2      	b.n	8000bda <__libc_init_array+0x1e>
 8000bf4:	08000c4c 	.word	0x08000c4c
 8000bf8:	08000c4c 	.word	0x08000c4c
 8000bfc:	08000c4c 	.word	0x08000c4c
 8000c00:	08000c50 	.word	0x08000c50

08000c04 <memset>:
 8000c04:	4603      	mov	r3, r0
 8000c06:	4402      	add	r2, r0
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <memset+0xa>
 8000c0c:	4770      	bx	lr
 8000c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c12:	e7f9      	b.n	8000c08 <memset+0x4>

08000c14 <_init>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr

08000c20 <_fini>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr
